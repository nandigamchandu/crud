{"version":3,"file":"devfractal-crud.cjs.development.js","sources":["../src/new/All.tsx","../src/new/ButtonLink.tsx","../src/new/common.ts","../src/new/Create.tsx","../src/new/CreateLink.tsx","../src/new/Edit.tsx","../src/new/CrudRoutes.tsx","../src/new/CrudTable.tsx","../src/new/FormComponent.tsx","../src/new/ListComponent.tsx","../src/new/One.tsx","../src/new/Pager.tsx","../src/new/useQuery.ts","../src/new/RoutedPager.tsx","../src/urls.ts","../src/api.ts","../src/utils.ts","../src/Editor.tsx","../src/Viewer.tsx","../src/Views.tsx","../src/Components.tsx","../src/Crud.tsx","../src/SimpleCrud.tsx"],"sourcesContent":["import { API, APIQuery, Page } from 'devfractal-api'\nimport { Route, useHistory, useLocation } from 'devfractal-router'\nimport { Get } from 'devfractal-ui-api'\nimport { parse, stringify } from 'query-string'\nimport React from 'react'\nimport {\n  cast,\n  IntFromString,\n  ObjC,\n  opt,\n  Props,\n  record,\n  string,\n  TypeOf,\n} from 'technoidentity-utils'\n\n// tslint:disable-next-line: typedef\nexport const ClientQuery = opt({\n  page: IntFromString,\n  limit: IntFromString,\n  asc: string,\n  desc: string,\n})\n\nexport interface AllComponentProps<T> {\n  readonly data: ReadonlyArray<T>\n  readonly page: number\n  onPageChange(page: number): void\n}\n\ninterface ChildrenProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly list: React.FC<AllComponentProps<TypeOf<ObjC<Opt, Req>>>>\n  queryFn?(search: string): APIQuery<TypeOf<ObjC<Opt, Req>>>\n}\n\nfunction defaultQueryFn<Opt extends Props, Req extends Props>(\n  search: string,\n): APIQuery<TypeOf<ObjC<Opt, Req>>> {\n  const { page = 1, limit = 25, asc, desc } = cast(\n    ClientQuery,\n    cast(record(string, string), parse(search)),\n  )\n\n  return {\n    range: { current: page, limit },\n    asc: asc ? [asc] : [],\n    desc: desc ? [desc] : [],\n  }\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  list: Component,\n  queryFn = defaultQueryFn,\n}: ChildrenProps<Opt, Req, ID>): JSX.Element {\n  const { pathname, search } = useLocation()\n  const { push } = useHistory()\n\n  // tslint:disable-next-line: typedef\n  const query = queryFn(search)\n\n  async function asyncFn(\n    query: APIQuery<TypeOf<ObjC<Opt, Req>>>,\n  ): Promise<ReadonlyArray<TypeOf<ObjC<Opt, Req>>>> {\n    return query ? api.list(query) : api.many()\n  }\n\n  function handlePageChange(page: number): void {\n    push(`${pathname}?${stringify({ ...query, page })}`)\n  }\n\n  const page: number =\n    Page.is(query.range) && query.range.current ? query.range.current : 1\n\n  return (\n    <Get asyncFn={asyncFn} deps={[query]}>\n      {data => (\n        <Component data={data} page={page} onPageChange={handlePageChange} />\n      )}\n    </Get>\n  )\n}\n\nexport interface AllComponentProps<T> {\n  readonly data: ReadonlyArray<T>\n  // fetchAgain(): void\n}\n\nexport interface AllProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> extends ChildrenProps<Opt, Req, ID> {\n  readonly path: string\n}\n\nexport function All<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: AllProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import {\n  AllControlHelpers,\n  ButtonProps,\n  classNamesHelper,\n  removeControlHelpers,\n  removeHelpers,\n  removeIconHelpers,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport interface ButtonLinkProps\n  extends React.AnchorHTMLAttributes<HTMLAnchorElement>,\n    AllControlHelpers {\n  readonly to: string\n  readonly variant?: ButtonProps['variant']\n  readonly size?: ButtonProps['size']\n  readonly state?: ButtonProps['state']\n  readonly fullWidth?: boolean\n  readonly rounded?: boolean\n  readonly inverted?: boolean\n  readonly outlined?: boolean\n}\n\nexport const ButtonLink: React.FC<ButtonLinkProps> = ({\n  variant,\n  size,\n  state,\n  fullWidth,\n  rounded,\n  inverted,\n  outlined,\n  children,\n\n  ...props\n}) => {\n  const classes: string = classNamesHelper(props, 'button', {\n    [`is-${variant}`]: variant,\n    [`is-${size}`]: size,\n    [`is-${state}`]: state,\n    'is-rounded': rounded,\n    'is-inverted': inverted,\n    'is-outlined': outlined,\n    'is-fullwidth': fullWidth,\n  })\nconst {inputMode, ...linkProps} = removeIconHelpers(removeControlHelpers(removeHelpers(props)))\n// const linkInputMode = (inputMode && inputMode as unknown as string) || undefined\n\n  // tslint:disable-next-line: typedef\n  return (\n    <Link {...linkProps} className={classes}>\n      {children}\n    </Link>\n  )\n}\n","import { SubmitAction } from 'devfractal-ui-api'\nimport { Mixed, number, readonlyArray, TypeOf } from 'technoidentity-utils'\nimport { fn, obj, req } from 'technoidentity-utils'\n\n// tslint:disable typedef\n\ntype CrudOperations = 'list' | 'edit' | 'create' | 'view'\nexport type Paths = Record<CrudOperations, string>\n\nexport function base(resource: string, basePath?: string): string {\n  return basePath ? `${basePath}/${resource}` : `/${resource}`\n}\n\nexport function paths(resource: string, basePath?: string): Paths {\n  return {\n    list: `${base(resource, basePath)}`,\n    view: `${base(resource, basePath)}/:id`,\n    edit: `${base(resource, basePath)}/:id/edit`,\n    create: `${base(resource, basePath)}/new`,\n  }\n}\n\nexport type Links = Omit<Paths, 'edit' | 'view'> & {\n  edit(id: string | number | undefined): string\n  view(id: string | number | undefined): string\n}\n\nexport function links(resource: string, basePath?: string): Links {\n  return {\n    ...paths(resource),\n    view: id => `${base(resource, basePath)}/${id}`,\n    edit: id => `${base(resource, basePath)}/${id}/edit`,\n  }\n}\n\nexport function formProps<Spec extends Mixed>(spec: Spec) {\n  return obj({ initial: spec }, { onSubmit: fn<SubmitAction<TypeOf<Spec>>>() })\n}\n\nexport function listProps<Spec extends Mixed>(spec: Spec) {\n  return req({\n    page: number,\n    onPageChange: fn<(page: number) => void>(),\n    data: readonlyArray(spec),\n  })\n}\n","import { API } from 'devfractal-api'\nimport { Route } from 'devfractal-router'\nimport { Post, SubmitAction } from 'devfractal-ui-api'\nimport React from 'react'\nimport { ObjC, Props, TypeOf } from 'technoidentity-utils'\n\n// tslint:disable no-unbound-method\n\nexport interface CreateProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly path: string\n  readonly redirectTo?: string\n  readonly form: React.FC<{\n    readonly onSubmit: SubmitAction<TypeOf<ObjC<Opt, Req>>>\n  }>\n  readonly api: API<Opt, Req, ID>\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  redirectTo,\n  form: Component,\n}: Omit<CreateProps<Opt, Req, ID>, 'path'>): JSX.Element {\n  return (\n    <Post component={Component} onPost={api.create} redirectTo={redirectTo} />\n  )\n}\n\nexport function Create<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: CreateProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import { ButtonsGroup, ButtonsGroupProps } from 'devfractal-ui-core'\nimport React from 'react'\nimport { ButtonLink, ButtonLinkProps } from './ButtonLink'\nexport interface CreateLinkProps extends ButtonLinkProps {\n  readonly alignment?: ButtonsGroupProps['alignment']\n}\n\nexport const CreateLink: React.FC<CreateLinkProps> = ({\n  alignment,\n  ...props\n}) => (\n  <ButtonsGroup alignment={alignment}>\n    <ButtonLink {...props} />\n  </ButtonsGroup>\n)\n","import { API } from 'devfractal-api'\nimport { Route, useMatch } from 'devfractal-router'\nimport { Put, SubmitAction } from 'devfractal-ui-api'\nimport React from 'react'\nimport {\n  getProp,\n  ObjC,\n  Props,\n  string,\n  type,\n  TypeOf,\n} from 'technoidentity-utils'\n\n// tslint:disable no-unbound-method\n\nexport interface EditComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface EditProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly path: string\n  readonly redirectTo?: string\n  readonly form: React.FC<EditComponentProps<TypeOf<ObjC<Opt, Req>>>>\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  redirectTo,\n  form: Component,\n}: Omit<EditProps<Opt, Req, ID>, 'path'>): JSX.Element {\n  const idPropSpec: TypeOf<ObjC<Opt, Req>>[ID] = getProp(api.spec, api.idKey)\n  if (idPropSpec === undefined) {\n    throw new Error(`${api.idKey} not defined`)\n  }\n\n  const { params } = useMatch(type({ [api.idKey]: string }))\n\n  return (\n    <Put\n      // @TODO: possible to fix this casting nonsense?\n      id={params[api.idKey as string] as any}\n      doGet={api.get}\n      onPut={api.replace}\n      component={Component}\n      redirectTo={redirectTo}\n    />\n  )\n}\n\nexport function Edit<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: EditProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import { API, APIQuery } from 'devfractal-api'\nimport React from 'react'\nimport { ObjC, Props, TypeOf } from 'technoidentity-utils'\nimport { All, AllComponentProps } from './All'\nimport { paths as resPaths } from './common'\nimport { Create } from './Create'\nimport { Edit, EditComponentProps } from './Edit'\n\nexport interface CrudRoutesProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly form: React.FC<EditComponentProps<TypeOf<ObjC<Opt, Req>>>>\n  readonly list: React.FC<AllComponentProps<TypeOf<ObjC<Opt, Req>>>>\n  readonly paths?: ReturnType<typeof resPaths>\n  readonly redirectTo?: string\n  queryFn?(search: string): APIQuery<TypeOf<ObjC<Opt, Req>>>\n}\n\nexport function CrudRoutes<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  list,\n  form,\n  paths = resPaths(api.resource),\n  redirectTo = paths.list,\n}: CrudRoutesProps<Opt, Req, ID>): JSX.Element {\n  const { create, edit, list: listPath } = paths\n\n  return (\n    <>\n      <Edit path={edit} api={api} form={form} redirectTo={redirectTo} />\n      <All api={api} list={list} path={listPath} />\n      <Create path={create} redirectTo={redirectTo} api={api} form={form} />\n    </>\n  )\n}\n","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { SimpleTable, SimpleTableProps } from 'devfractal-simple'\nimport { Icon } from 'devfractal-ui-core'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport interface ActionsProps {\n  readonly editTo: string\n  onDelete?(): void\n}\n\nexport const Actions: React.FC<ActionsProps> = ({ editTo, onDelete }) => {\n  return (\n    <>\n      <Link to={editTo}>\n        <Icon icon={faEdit} />\n      </Link>\n      {onDelete && (\n        <a\n          href=\"#!\"\n          onClick={evt => {\n            evt.preventDefault()\n            onDelete()\n          }}\n        >\n          <Icon icon={faTrash} />\n        </a>\n      )}\n    </>\n  )\n}\n\nexport interface CrudTableProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n>\n  extends Pick<\n    SimpleTableProps<T, EK, Select>,\n    'select' | 'override' | 'extra' | 'onRowClicked'\n  > {\n  readonly data: ReadonlyArray<T>\n  editTo(value: T): string\n  onDelete?(value: T): void\n}\n\nexport function CrudTable<T extends Record<string, any>, EK extends string>({\n  data,\n  select,\n  override,\n  extra,\n  editTo,\n  onDelete,\n  onRowClicked,\n}: CrudTableProps<T, EK>): JSX.Element {\n  return (\n    <SimpleTable\n      data={data}\n      select={select}\n      override={override}\n      extra={[...(extra || []), 'Actions']}\n      striped\n      onRowClicked={onRowClicked}\n    >\n      {(key, value) =>\n        key === 'Actions' ? (\n          <Actions\n            editTo={editTo(value)}\n            onDelete={() => {\n              if (onDelete) {\n                onDelete(value)\n              }\n            }}\n          />\n        ) : // tslint:disable-next-line: no-null-keyword\n        null\n      }\n    </SimpleTable>\n  )\n}\n","import { SubmitAction } from 'devfractal-ui-api'\nimport React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { cast, empty } from 'technoidentity-utils'\nimport { formProps } from './common'\n\ninterface InnerFormProps<T> {\n  readonly initial: T\n  readonly edit: boolean\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface FormProps<T> {\n  readonly onSubmit: InnerFormProps<T>['onSubmit']\n  readonly initial?: InnerFormProps<T>['initial']\n}\n\n// tslint:disable typedef\n\nexport function formComponent<Spec extends Mixed>(\n  spec: Spec,\n  inner: React.FC<InnerFormProps<TypeOf<Spec>>>,\n): React.FC<FormProps<TypeOf<Spec>>> {\n  return ({ initial, ...props }) => {\n    const Component = inner\n    const verified = cast(formProps(spec), props)\n    const compProps = {\n      initial: initial || empty(spec),\n      edit: initial !== undefined,\n      ...verified,\n    }\n\n    return <Component {...compProps} />\n  }\n}\n","import React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { cast } from 'technoidentity-utils'\nimport { listProps } from './common'\n\nexport interface ListProps<T> {\n  readonly data: ReadonlyArray<T>\n  readonly page: number\n  onPageChange(page: number): void\n}\n\nexport function listComponent<Spec extends Mixed>(\n  spec: Spec,\n  Component: React.FC<ListProps<TypeOf<Spec>>>,\n): React.FC<ListProps<TypeOf<Spec>>> {\n  return props => <Component {...cast(listProps(spec), props)} />\n}\n","import { API } from 'devfractal-api'\nimport { Route } from 'devfractal-router'\nimport { Get } from 'devfractal-ui-api'\nimport React from 'react'\nimport { ObjC, Props, TypeOf } from 'technoidentity-utils'\n\nexport interface OneComponentProps<T> {\n  readonly data: T\n  // fetchAgain(): void\n}\n\nexport interface OneProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly path: string\n  readonly id: TypeOf<ObjC<Opt, Req>>[ID]\n  readonly view: React.FC<OneComponentProps<TypeOf<ObjC<Opt, Req>>>>\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  id,\n  view: Component,\n}: Omit<OneProps<Opt, Req, ID>, 'path'>): JSX.Element {\n  return (\n    <Get asyncFn={() => api.get(id)}>{data => <Component data={data} />}</Get>\n  )\n}\n\nexport function One<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: OneProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import { Pagination, PaginationNext, PaginationPrevious } from 'devfractal-ui'\nimport React from 'react'\n\nexport interface PagerProps {\n  // first page is 1\n  readonly page: number\n  readonly maxPages?: number\n  onPageChange(n: number): void\n}\n\nexport const Pager: React.FC<PagerProps> = ({\n  page,\n  maxPages,\n  onPageChange,\n}) => (\n  <Pagination alignment=\"centered\">\n    <PaginationPrevious\n      invisible={page <= 1}\n      onClick={() => {\n        onPageChange(page - 1)\n      }}\n    >\n      Previous\n    </PaginationPrevious>\n\n    <PaginationNext\n      invisible={maxPages !== undefined && page >= maxPages}\n      onClick={() => {\n        onPageChange(page + 1)\n      }}\n    >\n      Next\n    </PaginationNext>\n\n    {/* <PaginationList>\n      <PaginationLink current aria-label=\"Goto page 1\">\n        1\n      </PaginationLink>\n      <PaginationEllipsis>&hellip</PaginationEllipsis>\n      <PaginationLink aria-label=\"Goto page 11\">11</PaginationLink>\n      <PaginationLink aria-label=\"Page 12\">12</PaginationLink>\n\n      <PaginationEllipsis />\n      <PaginationLink aria-label=\"Goto page 20\">20</PaginationLink>\n    </PaginationList> */}\n  </Pagination>\n)\n","import { useLocation } from 'devfractal-router'\nimport { parse } from 'query-string'\nimport { cast, ObjC, Props, record, string, TypeOf } from 'technoidentity-utils'\n\nexport function useQuery<Opt extends Props, Req extends Props>(\n  spec: ObjC<Req, Opt>,\n): TypeOf<typeof spec> {\n  const { search } = useLocation()\n  const query: Record<string, string> = cast(\n    record(string, string),\n    parse(search),\n  )\n\n  return cast(spec, query)\n}\n","import { useHistory, useLocation } from 'devfractal-router'\nimport { stringify } from 'query-string'\nimport React from 'react'\nimport { IntFromString, opt } from 'technoidentity-utils'\nimport { Pager } from './Pager'\nimport { useQuery } from './useQuery'\n\nexport const RoutedPager: React.FC = () => {\n  const { pathname } = useLocation()\n  const { push } = useHistory()\n\n  // tslint:disable-next-line: typedef\n  const query = useQuery(opt({ page: IntFromString }))\n\n  const page: number = query.page ? query.page : 1\n\n  return (\n    <Pager\n      page={page}\n      onPageChange={page => {\n        push(`${pathname}?${stringify({ ...query, page })}`)\n      }}\n    />\n  )\n}\n","import { Int, string, TypeOf, union } from 'technoidentity-utils'\nimport { cast, chop, verify } from 'technoidentity-utils'\n\n// tslint:disable-next-line: typedef\nconst idRT = union([Int, string])\n\ntype ID = TypeOf<typeof idRT>\n\nexport interface URLs {\n  all(): string\n  create(): string\n  one(id: ID): string\n  edit(id: ID): string\n  remove(id: ID): string\n}\n\ninterface URLsArgs {\n  readonly baseURL: string\n  readonly resource: string\n  readonly paths?: string | readonly string[]\n  readonly query?: string | Object\n}\n\nexport function apiURLs({\n  baseURL, // eg: 'https://localhost:3000'\n  resource, // eg: 'todos'\n}: URLsArgs): URLs {\n  const base: string = chop(baseURL.trim())\n  const res: string = resource.trim()\n\n  verify(base.startsWith('http'))\n  verify(!res.includes('/'))\n\n  return {\n    all: () => `${base}/${res}`,\n\n    create: () => `${base}/${res}`,\n\n    one: (id: ID) => {\n      cast(idRT, id)\n      return `${base}/${res}/${id}`\n    },\n\n    edit: (id: ID) => {\n      cast(idRT, id)\n      return `${base}/${res}/${id}`\n    },\n\n    remove: (id: ID) => {\n      cast(idRT, id)\n      return `${base}/${res}/${id}`\n    },\n  }\n}\n","import axios, { AxiosPromise } from 'axios'\nimport {\n  Mixed,\n  readonlyArray,\n  ReadonlyArrayC,\n  Type,\n  TypeOf,\n} from 'technoidentity-utils'\nimport { cast, toPromise } from 'technoidentity-utils'\nimport { apiURLs, URLs } from './urls'\n\n// tslint:disable typedef\n\nexport interface Repository<\n  T extends Record<string, any>,\n  ID extends keyof T,\n  V extends number | string = T[ID]\n> {\n  all(): Promise<ReadonlyArray<T>>\n  create(value: Omit<T, ID>): Promise<T>\n  one(id: V): Promise<T>\n  edit(value: T): Promise<T>\n  remove(id: V): Promise<T>\n}\n\nexport interface APIArgs<RT extends Mixed, ID extends keyof TypeOf<RT>> {\n  readonly baseURL: string\n  readonly value: RT\n  readonly id: ID\n  readonly resource: string\n  readonly listValue?: ReadonlyArrayC<RT>\n  readonly urls?: URLs\n}\n\nexport interface APIRepository<RT extends Mixed, ID extends keyof TypeOf<RT>>\n  extends Repository<TypeOf<RT>, ID>,\n    Required<APIArgs<RT, ID>> {}\n\nconst request: <A>(\n  value: Type<A>,\n  promise: AxiosPromise<A>,\n) => Promise<A> = async (value, promise) =>\n  toPromise(value.decode((await promise).data))\n\nexport function api<RT extends Mixed, ID extends keyof TypeOf<RT>>({\n  baseURL,\n  value,\n  id,\n  resource,\n  listValue = readonlyArray(value),\n  urls = apiURLs({ baseURL, resource }),\n}: APIArgs<RT, ID>): APIRepository<RT, ID> {\n  async function all() {\n    const result: TypeOf<typeof listValue> = await request(\n      listValue,\n      axios.get<TypeOf<typeof listValue>>(urls.all()),\n    )\n    cast(listValue, result)\n\n    return result\n  }\n\n  async function one(pid: any) {\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.get<TypeOf<typeof value>>(urls.one(pid)),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  async function create(v: any) {\n    // @TODO: cast(value without id, v)\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.post<TypeOf<typeof value>>(urls.create(), v),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  async function edit(v: any) {\n    cast(value, v)\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.put<TypeOf<typeof value>>(urls.edit(v.id), v),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  async function remove(pid: any) {\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.delete(urls.remove(pid)),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  return {\n    baseURL,\n    resource,\n    value,\n    listValue,\n    urls,\n    id,\n    all,\n    remove,\n    create,\n    edit,\n    one,\n  }\n}\n","import { format } from 'date-fns'\n\nexport function formatDate(date: Date | undefined): string | undefined {\n  return date && format(date, 'dd/MM/yyyy')\n}\n\nexport function isFunction(x: unknown): x is Function {\n  return typeof x === 'function'\n}\n","import { Simple } from 'devfractal-simple'\nimport { Get } from 'devfractal-ui-api'\nimport { Section } from 'devfractal-ui-core'\nimport { FormikActions } from 'formik'\nimport React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { date } from 'technoidentity-utils'\nimport { ObjectSchema } from 'yup'\nimport { isFunction } from './utils'\nexport interface EditorViewProps<T extends {}> {\n  readonly data: T\n  readonly id?: keyof T\n  readonly schema?: ObjectSchema<T>\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\nexport function EditorView<T extends {}>({\n  data,\n  id,\n  schema,\n  onSubmit,\n}: EditorViewProps<T>): JSX.Element {\n  return (\n    <Section>\n      <Simple.Form\n        validationSchema={schema}\n        initialValues={data}\n        onSubmit={onSubmit}\n      >\n        {Object.keys(data).map(key => (\n          <React.Fragment key={key}>\n            {key !== id &&\n              (t.boolean.is(data[key]) ? (\n                <Simple.Checkbox name={key} />\n              ) : t.number.is(data[key]) ? (\n                <Simple.Number name={key} />\n              ) : date.is(data[key]) ? (\n                <Simple.Date name={key} />\n              ) : (\n                <Simple.Text name={key} />\n              ))}\n          </React.Fragment>\n        ))}\n        <Simple.FormButtons />\n      </Simple.Form>\n    </Section>\n  )\n}\n\nexport interface EditorProps<T extends {}> {\n  readonly data: T | (() => Promise<T>)\n  readonly id: keyof T\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\nexport function Editor<T extends {}>({\n  data,\n  onSubmit,\n  id,\n}: EditorProps<T>): JSX.Element {\n  if (isFunction(data)) {\n    return (\n      <Get asyncFn={data}>\n        {data => <EditorView id={id} data={data} onSubmit={onSubmit} />}\n      </Get>\n    )\n  }\n\n  return <EditorView id={id} data={data} onSubmit={onSubmit} />\n}\n","import { Get } from 'devfractal-ui-api'\nimport {\n  CheckBox,\n  Column,\n  Columns,\n  Section,\n  Text,\n  Title,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { date } from 'technoidentity-utils'\nimport { camelCaseToPhrase } from 'technoidentity-utils'\nimport { formatDate, isFunction } from './utils'\n\nconst Header: React.FC<{ readonly objectKey: string }> = ({ objectKey }) => (\n  <Title size=\"6\">{camelCaseToPhrase(objectKey)}</Title>\n)\n\nconst Value: React.FC<{\n  readonly objectValue: string\n}> = ({ objectValue }) =>\n  t.boolean.is(objectValue) ? (\n    <CheckBox checked={objectValue} readOnly />\n  ) : date.is(objectValue) ? (\n    <Text>{formatDate(objectValue)}</Text>\n  ) : (\n    <>{objectValue}</>\n  )\n\nexport interface ViewerViewProps<T extends {}> {\n  readonly data: T\n}\n\nexport function ViewerView<T extends {}>({\n  data,\n}: ViewerViewProps<T>): JSX.Element {\n  return (\n    <Section>\n      {Object.keys(data).map(key => (\n        <Columns key={key}>\n          <Column>\n            <Header objectKey={key} />\n          </Column>\n          <Column>\n            <Value objectValue={data[key]} />\n          </Column>\n        </Columns>\n      ))}\n    </Section>\n  )\n}\n\nexport interface ViewerProps<T extends {}> {\n  readonly data: T | (() => Promise<T>)\n}\n\nexport function Viewer<T extends {}>({ data }: ViewerProps<T>): JSX.Element {\n  if (isFunction(data)) {\n    return <Get asyncFn={data}>{data => <ViewerView data={data} />}</Get>\n  }\n  return <ViewerView data={data} />\n}\n","import { RowClickEvent, SimpleTable } from 'devfractal-simple'\nimport { Button, Container, Field } from 'devfractal-ui-core'\nimport { FormikActions } from 'formik'\nimport React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { empty } from 'technoidentity-utils'\nimport { Editor } from './Editor'\nimport { Viewer } from './Viewer'\n\ninterface EditProps<T extends Record<string, any>> {\n  readonly data: T | (() => Promise<T>)\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\ninterface ViewProps<T extends Record<string, any>> {\n  readonly data: T | (() => Promise<T>)\n}\n\ninterface CreateProps<T extends Record<string, any>> {\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\ninterface ListProps<T extends Record<string, any>> {\n  list(): Promise<ReadonlyArray<T>>\n  onCreate?(): void\n  onEdit?(value: RowClickEvent<T>): void\n  onDelete?(value: RowClickEvent<T>): void\n}\n\nexport interface CrudViewsResult<T extends Mixed, ID extends keyof T> {\n  readonly List: React.FC<ListProps<TypeOf<T>>>\n  readonly Create: React.FC<CreateProps<Omit<TypeOf<T>, ID>>>\n  readonly Edit: React.FC<EditProps<TypeOf<T>>>\n  readonly View: React.FC<ViewProps<TypeOf<T>>>\n}\n\nexport function Views<RT extends Mixed, ID extends keyof RT>(\n  // cannot pass this to create, as getting type from typeValue is easy,\n  // not the other way round\n  typeValue: RT,\n  id: keyof RT,\n): CrudViewsResult<RT, ID> {\n  return {\n    Create: ({ onSubmit }) => (\n      <Editor id={id} data={empty(typeValue)} onSubmit={onSubmit} />\n    ),\n\n    Edit: ({ data, onSubmit }) => (\n      <Editor id={id} data={data} onSubmit={onSubmit} />\n    ),\n\n    View: ({ data }) => <Viewer data={data} />,\n\n    List: ({ list, onCreate, onEdit }) => {\n      return (\n        <Container>\n          <Field groupModifier=\"grouped-right\">\n            <Button variant=\"primary\" onClick={onCreate}>\n              New\n            </Button>\n          </Field>\n          <SimpleTable data={list} onRowClicked={onEdit} />\n        </Container>\n      )\n    },\n  }\n}\n","import { formikSubmit } from 'devfractal-forms'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { APIRepository, Repository } from './api'\nimport { links as links_, paths as paths_ } from './new'\nimport { CrudViewsResult, Views } from './Views'\ninterface ComponentsArgsBase<\n  RT extends Mixed,\n  ID extends keyof TypeOf<RT>,\n  R extends Repository<TypeOf<RT>, ID> = Repository<TypeOf<RT>, ID>\n> {\n  readonly api: R\n  readonly basePath: string\n  readonly Views?: CrudViewsResult<RT, ID>\n}\ninterface ComponentsArgs<RT extends Mixed, ID extends keyof TypeOf<RT>>\n  extends ComponentsArgsBase<RT, ID> {\n  readonly value: RT\n  readonly id: ID\n  readonly resource: string\n}\n\ninterface APIComponentsArgs<RT extends Mixed, ID extends keyof TypeOf<RT>>\n  extends ComponentsArgsBase<RT, ID, APIRepository<RT, ID>> {}\n\nexport interface ComponentsResult {\n  readonly List: React.FC<RouteComponentProps>\n  readonly Create: React.FC<RouteComponentProps>\n  readonly Edit: React.FC<RouteComponentProps<{ readonly id: string }>>\n  readonly View: React.FC<RouteComponentProps<{ readonly id: string }>>\n}\n\nexport function components<RT extends Mixed, ID extends keyof TypeOf<RT>>(\n  args: ComponentsArgs<RT, ID> | APIComponentsArgs<RT, ID>,\n): ComponentsResult {\n  // tslint:disable typedef\n  const { all, one, create, edit } = args.api\n\n  const value = 'value' in args ? args.value : args.api.value\n\n  const resource = 'value' in args ? args.resource : args.api.resource\n\n  const id = 'value' in args ? args.id : args.api.id\n\n  const CV = args.Views || Views(value, id)\n  // @TODO: only if 'name' is alphanumeric\n\n  const basePath = args.basePath\n\n  const links = links_(resource, basePath)\n  const paths = paths_(resource, basePath)\n\n  // tslint:enable typedef\n\n  return {\n    List: ({ history }) => (\n      <CV.List\n        list={all}\n        onEdit={({ value }) => history.push(links.edit(value.id))}\n        onCreate={() => history.push(paths.create)}\n      />\n    ),\n    Create: ({ history }) => (\n      <CV.Create\n        onSubmit={async (values, actions) => {\n          await formikSubmit(create)(values, actions)\n          history.push(paths.list)\n          // @TODO: handle error?\n        }}\n      />\n    ),\n\n    Edit: ({ history, match }) => (\n      <CV.Edit\n        data={async () => one(match.params.id)}\n        onSubmit={async (values, actions) => {\n          await formikSubmit(edit)(values, actions)\n          history.push(paths.list)\n          // @TODO: handle error?\n        }}\n      />\n    ),\n\n    View: ({ match }) => <CV.View data={async () => one(match.params.id)} />,\n  }\n}\n","import { Route } from 'devfractal-router'\nimport { Section } from 'devfractal-ui-core'\nimport React from 'react'\nimport { Switch } from 'react-router'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { APIRepository } from './api'\nimport { components as comps, ComponentsResult } from './Components'\nimport { paths as ps } from './new'\n\nexport interface CrudProps<RT extends Mixed, ID extends keyof TypeOf<RT>> {\n  readonly api: APIRepository<RT, ID>\n  readonly basePath: string\n  readonly paths?: ReturnType<typeof ps>\n  readonly components?: ComponentsResult\n}\n\nexport function Crud<RT extends Mixed, ID extends keyof TypeOf<RT>>({\n  basePath,\n  api,\n  paths = ps(api.resource, basePath),\n  components = comps<RT, ID>({ api, basePath }),\n}: CrudProps<RT, ID>): JSX.Element {\n  const { create, list, edit, view } = paths\n  const { Create, List, Edit, View } = components\n\n  return (\n    <Section>\n      <Switch>\n        <Route path={create} component={Create} />\n        <Route path={edit} component={Edit} />\n        <Route path={view} component={View} />\n        <Route path={list} component={List} />\n      </Switch>\n    </Section>\n  )\n}\n","import React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { assert } from 'technoidentity-utils'\nimport { api } from './api'\nimport { Crud } from './Crud'\n\nexport interface SimpleCrudProps<RT extends Mixed> {\n  readonly baseURL: string\n  readonly value: RT\n  readonly id: keyof TypeOf<RT>\n  readonly resource?: string\n  readonly basePath?: string\n}\n\nexport const SimpleCrud: <T extends Mixed>(\n  args: SimpleCrudProps<T>,\n) => JSX.Element = ({ basePath = '', id, resource, ...props }) => {\n  assert(id !== undefined || 'id' in props.value, 'no id defined')\n\n  return (\n    <Crud\n      api={api({\n        id,\n        resource: resource || props.value.name,\n        ...props,\n      })}\n      basePath={basePath}\n    />\n  )\n}\n"],"names":["ClientQuery","opt","page","IntFromString","limit","asc","string","desc","defaultQueryFn","search","cast","record","parse","range","current","Children","asyncFn","query","api","list","many","Component","queryFn","useLocation","pathname","useHistory","push","handlePageChange","stringify","Page","is","React","Get","deps","data","onPageChange","All","path","props","Route","render","ButtonLink","variant","size","state","fullWidth","rounded","inverted","outlined","children","classes","classNamesHelper","removeIconHelpers","removeControlHelpers","removeHelpers","inputMode","linkProps","Link","className","base","resource","basePath","paths","view","edit","create","links","id","formProps","spec","obj","initial","onSubmit","fn","listProps","req","number","readonlyArray","redirectTo","form","Post","component","onPost","Create","CreateLink","alignment","ButtonsGroup","idPropSpec","getProp","idKey","undefined","Error","useMatch","type","params","Put","doGet","get","onPut","replace","Edit","CrudRoutes","resPaths","listPath","Actions","editTo","onDelete","to","Icon","icon","faEdit","href","onClick","evt","preventDefault","faTrash","CrudTable","select","override","extra","onRowClicked","SimpleTable","striped","key","value","formComponent","inner","verified","compProps","empty","listComponent","One","Pager","maxPages","Pagination","PaginationPrevious","invisible","PaginationNext","useQuery","RoutedPager","idRT","union","Int","apiURLs","baseURL","chop","trim","res","verify","startsWith","includes","all","one","remove","request","promise","decode","toPromise","pid","axios","urls","result","v","put","post","listValue","formatDate","date","format","isFunction","x","EditorView","schema","Section","Simple","Form","validationSchema","initialValues","Object","keys","map","Fragment","t","Checkbox","name","Number","Date","Text","FormButtons","Editor","Header","objectKey","Title","camelCaseToPhrase","Value","objectValue","CheckBox","checked","readOnly","ViewerView","Columns","Column","Viewer","Views","typeValue","View","List","onCreate","onEdit","Container","Field","groupModifier","Button","components","args","CV","links_","paths_","history","values","actions","formikSubmit","match","Crud","ps","comps","Switch","SimpleCrud","assert"],"mappings":"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"}