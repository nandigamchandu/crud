{"version":3,"file":"devfractal-crud.cjs.production.min.js","sources":["../src/new/All.tsx","../src/new/ButtonLink.tsx","../src/new/common.ts","../src/new/Create.tsx","../src/new/Edit.tsx","../src/new/CrudTable.tsx","../src/new/One.tsx","../src/new/Pager.tsx","../src/urls.ts","../src/api.ts","../src/utils.ts","../src/Editor.tsx","../src/Viewer.tsx","../src/Views.tsx","../src/Components.tsx","../src/Crud.tsx","../src/new/CreateLink.tsx","../src/new/CrudRoutes.tsx","../src/new/RoutedPager.tsx","../src/new/useQuery.ts","../src/SimpleCrud.tsx","../src/new/FormComponent.tsx","../src/new/ListComponent.tsx"],"sourcesContent":["import { API, APIQuery, Page } from 'devfractal-api'\nimport { Route, useHistory, useLocation } from 'devfractal-router'\nimport { Get } from 'devfractal-ui-api'\nimport { parse, stringify } from 'query-string'\nimport React from 'react'\nimport {\n  cast,\n  IntFromString,\n  ObjC,\n  opt,\n  Props,\n  record,\n  string,\n  TypeOf,\n} from 'technoidentity-utils'\n\n// tslint:disable-next-line: typedef\nexport const ClientQuery = opt({\n  page: IntFromString,\n  limit: IntFromString,\n  asc: string,\n  desc: string,\n})\n\nexport interface AllComponentProps<T> {\n  readonly data: ReadonlyArray<T>\n  readonly page: number\n  onPageChange(page: number): void\n}\n\ninterface ChildrenProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly list: React.FC<AllComponentProps<TypeOf<ObjC<Opt, Req>>>>\n  queryFn?(search: string): APIQuery<TypeOf<ObjC<Opt, Req>>>\n}\n\nfunction defaultQueryFn<Opt extends Props, Req extends Props>(\n  search: string,\n): APIQuery<TypeOf<ObjC<Opt, Req>>> {\n  const { page = 1, limit = 25, asc, desc } = cast(\n    ClientQuery,\n    cast(record(string, string), parse(search)),\n  )\n\n  return {\n    range: { current: page, limit },\n    asc: asc ? [asc] : [],\n    desc: desc ? [desc] : [],\n  }\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  list: Component,\n  queryFn = defaultQueryFn,\n}: ChildrenProps<Opt, Req, ID>): JSX.Element {\n  const { pathname, search } = useLocation()\n  const { push } = useHistory()\n\n  // tslint:disable-next-line: typedef\n  const query = queryFn(search)\n\n  async function asyncFn(\n    query: APIQuery<TypeOf<ObjC<Opt, Req>>>,\n  ): Promise<ReadonlyArray<TypeOf<ObjC<Opt, Req>>>> {\n    return query ? api.list(query) : api.many()\n  }\n\n  function handlePageChange(page: number): void {\n    push(`${pathname}?${stringify({ ...query, page })}`)\n  }\n\n  const page: number =\n    Page.is(query.range) && query.range.current ? query.range.current : 1\n\n  return (\n    <Get asyncFn={asyncFn} deps={[query]}>\n      {data => (\n        <Component data={data} page={page} onPageChange={handlePageChange} />\n      )}\n    </Get>\n  )\n}\n\nexport interface AllComponentProps<T> {\n  readonly data: ReadonlyArray<T>\n  // fetchAgain(): void\n}\n\nexport interface AllProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> extends ChildrenProps<Opt, Req, ID> {\n  readonly path: string\n}\n\nexport function All<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: AllProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import {\n  AllControlHelpers,\n  ButtonProps,\n  classNamesHelper,\n  removeControlHelpers,\n  removeHelpers,\n  removeIconHelpers,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport interface ButtonLinkProps\n  extends React.AnchorHTMLAttributes<HTMLAnchorElement>,\n    AllControlHelpers {\n  readonly to: string\n  readonly variant?: ButtonProps['variant']\n  readonly size?: ButtonProps['size']\n  readonly state?: ButtonProps['state']\n  readonly fullWidth?: boolean\n  readonly rounded?: boolean\n  readonly inverted?: boolean\n  readonly outlined?: boolean\n}\n\nexport const ButtonLink: React.FC<ButtonLinkProps> = ({\n  variant,\n  size,\n  state,\n  fullWidth,\n  rounded,\n  inverted,\n  outlined,\n  children,\n\n  ...props\n}) => {\n  const classes: string = classNamesHelper(props, 'button', {\n    [`is-${variant}`]: variant,\n    [`is-${size}`]: size,\n    [`is-${state}`]: state,\n    'is-rounded': rounded,\n    'is-inverted': inverted,\n    'is-outlined': outlined,\n    'is-fullwidth': fullWidth,\n  })\nconst {inputMode, ...linkProps} = removeIconHelpers(removeControlHelpers(removeHelpers(props)))\n// const linkInputMode = (inputMode && inputMode as unknown as string) || undefined\n\n  // tslint:disable-next-line: typedef\n  return (\n    <Link {...linkProps} className={classes}>\n      {children}\n    </Link>\n  )\n}\n","import { SubmitAction } from 'devfractal-ui-api'\nimport { Mixed, number, readonlyArray, TypeOf } from 'technoidentity-utils'\nimport { fn, obj, req } from 'technoidentity-utils'\n\n// tslint:disable typedef\n\ntype CrudOperations = 'list' | 'edit' | 'create' | 'view'\nexport type Paths = Record<CrudOperations, string>\n\nexport function base(resource: string, basePath?: string): string {\n  return basePath ? `${basePath}/${resource}` : `/${resource}`\n}\n\nexport function paths(resource: string, basePath?: string): Paths {\n  return {\n    list: `${base(resource, basePath)}`,\n    view: `${base(resource, basePath)}/:id`,\n    edit: `${base(resource, basePath)}/:id/edit`,\n    create: `${base(resource, basePath)}/new`,\n  }\n}\n\nexport type Links = Omit<Paths, 'edit' | 'view'> & {\n  edit(id: string | number | undefined): string\n  view(id: string | number | undefined): string\n}\n\nexport function links(resource: string, basePath?: string): Links {\n  return {\n    ...paths(resource),\n    view: id => `${base(resource, basePath)}/${id}`,\n    edit: id => `${base(resource, basePath)}/${id}/edit`,\n  }\n}\n\nexport function formProps<Spec extends Mixed>(spec: Spec) {\n  return obj({ initial: spec }, { onSubmit: fn<SubmitAction<TypeOf<Spec>>>() })\n}\n\nexport function listProps<Spec extends Mixed>(spec: Spec) {\n  return req({\n    page: number,\n    onPageChange: fn<(page: number) => void>(),\n    data: readonlyArray(spec),\n  })\n}\n","import { API } from 'devfractal-api'\nimport { Route } from 'devfractal-router'\nimport { Post, SubmitAction } from 'devfractal-ui-api'\nimport React from 'react'\nimport { ObjC, Props, TypeOf } from 'technoidentity-utils'\n\n// tslint:disable no-unbound-method\n\nexport interface CreateProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly path: string\n  readonly redirectTo?: string\n  readonly form: React.FC<{\n    readonly onSubmit: SubmitAction<TypeOf<ObjC<Opt, Req>>>\n  }>\n  readonly api: API<Opt, Req, ID>\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  redirectTo,\n  form: Component,\n}: Omit<CreateProps<Opt, Req, ID>, 'path'>): JSX.Element {\n  return (\n    <Post component={Component} onPost={api.create} redirectTo={redirectTo} />\n  )\n}\n\nexport function Create<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: CreateProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import { API } from 'devfractal-api'\nimport { Route, useMatch } from 'devfractal-router'\nimport { Put, SubmitAction } from 'devfractal-ui-api'\nimport React from 'react'\nimport {\n  getProp,\n  ObjC,\n  Props,\n  string,\n  type,\n  TypeOf,\n} from 'technoidentity-utils'\n\n// tslint:disable no-unbound-method\n\nexport interface EditComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface EditProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly path: string\n  readonly redirectTo?: string\n  readonly form: React.FC<EditComponentProps<TypeOf<ObjC<Opt, Req>>>>\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  redirectTo,\n  form: Component,\n}: Omit<EditProps<Opt, Req, ID>, 'path'>): JSX.Element {\n  const idPropSpec: TypeOf<ObjC<Opt, Req>>[ID] = getProp(api.spec, api.idKey)\n  if (idPropSpec === undefined) {\n    throw new Error(`${api.idKey} not defined`)\n  }\n\n  const { params } = useMatch(type({ [api.idKey]: string }))\n\n  return (\n    <Put\n      // @TODO: possible to fix this casting nonsense?\n      id={params[api.idKey as string] as any}\n      doGet={api.get}\n      onPut={api.replace}\n      component={Component}\n      redirectTo={redirectTo}\n    />\n  )\n}\n\nexport function Edit<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: EditProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { SimpleTable, SimpleTableProps } from 'devfractal-simple'\nimport { Icon } from 'devfractal-ui-core'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport interface ActionsProps {\n  readonly editTo: string\n  onDelete?(): void\n}\n\nexport const Actions: React.FC<ActionsProps> = ({ editTo, onDelete }) => {\n  return (\n    <>\n      <Link to={editTo}>\n        <Icon icon={faEdit} />\n      </Link>\n      {onDelete && (\n        <a\n          href=\"#!\"\n          onClick={evt => {\n            evt.preventDefault()\n            onDelete()\n          }}\n        >\n          <Icon icon={faTrash} />\n        </a>\n      )}\n    </>\n  )\n}\n\nexport interface CrudTableProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n>\n  extends Pick<\n    SimpleTableProps<T, EK, Select>,\n    'select' | 'override' | 'extra' | 'onRowClicked'\n  > {\n  readonly data: ReadonlyArray<T>\n  editTo(value: T): string\n  onDelete?(value: T): void\n}\n\nexport function CrudTable<T extends Record<string, any>, EK extends string>({\n  data,\n  select,\n  override,\n  extra,\n  editTo,\n  onDelete,\n  onRowClicked,\n}: CrudTableProps<T, EK>): JSX.Element {\n  return (\n    <SimpleTable\n      data={data}\n      select={select}\n      override={override}\n      extra={[...(extra || []), 'Actions']}\n      striped\n      onRowClicked={onRowClicked}\n    >\n      {(key, value) =>\n        key === 'Actions' ? (\n          <Actions\n            editTo={editTo(value)}\n            onDelete={() => {\n              if (onDelete) {\n                onDelete(value)\n              }\n            }}\n          />\n        ) : // tslint:disable-next-line: no-null-keyword\n        null\n      }\n    </SimpleTable>\n  )\n}\n","import { API } from 'devfractal-api'\nimport { Route } from 'devfractal-router'\nimport { Get } from 'devfractal-ui-api'\nimport React from 'react'\nimport { ObjC, Props, TypeOf } from 'technoidentity-utils'\n\nexport interface OneComponentProps<T> {\n  readonly data: T\n  // fetchAgain(): void\n}\n\nexport interface OneProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly path: string\n  readonly id: TypeOf<ObjC<Opt, Req>>[ID]\n  readonly view: React.FC<OneComponentProps<TypeOf<ObjC<Opt, Req>>>>\n}\n\nfunction Children<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  id,\n  view: Component,\n}: Omit<OneProps<Opt, Req, ID>, 'path'>): JSX.Element {\n  return (\n    <Get asyncFn={() => api.get(id)}>{data => <Component data={data} />}</Get>\n  )\n}\n\nexport function One<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({ path, ...props }: OneProps<Opt, Req, ID>): JSX.Element {\n  return path ? (\n    <Route path={path} render={() => <Children {...props} />} />\n  ) : (\n    <Children {...props} />\n  )\n}\n","import { Pagination, PaginationNext, PaginationPrevious } from 'devfractal-ui'\nimport React from 'react'\n\nexport interface PagerProps {\n  // first page is 1\n  readonly page: number\n  readonly maxPages?: number\n  onPageChange(n: number): void\n}\n\nexport const Pager: React.FC<PagerProps> = ({\n  page,\n  maxPages,\n  onPageChange,\n}) => (\n  <Pagination alignment=\"centered\">\n    <PaginationPrevious\n      invisible={page <= 1}\n      onClick={() => {\n        onPageChange(page - 1)\n      }}\n    >\n      Previous\n    </PaginationPrevious>\n\n    <PaginationNext\n      invisible={maxPages !== undefined && page >= maxPages}\n      onClick={() => {\n        onPageChange(page + 1)\n      }}\n    >\n      Next\n    </PaginationNext>\n\n    {/* <PaginationList>\n      <PaginationLink current aria-label=\"Goto page 1\">\n        1\n      </PaginationLink>\n      <PaginationEllipsis>&hellip</PaginationEllipsis>\n      <PaginationLink aria-label=\"Goto page 11\">11</PaginationLink>\n      <PaginationLink aria-label=\"Page 12\">12</PaginationLink>\n\n      <PaginationEllipsis />\n      <PaginationLink aria-label=\"Goto page 20\">20</PaginationLink>\n    </PaginationList> */}\n  </Pagination>\n)\n","import { Int, string, TypeOf, union } from 'technoidentity-utils'\nimport { cast, chop, verify } from 'technoidentity-utils'\n\n// tslint:disable-next-line: typedef\nconst idRT = union([Int, string])\n\ntype ID = TypeOf<typeof idRT>\n\nexport interface URLs {\n  all(): string\n  create(): string\n  one(id: ID): string\n  edit(id: ID): string\n  remove(id: ID): string\n}\n\ninterface URLsArgs {\n  readonly baseURL: string\n  readonly resource: string\n  readonly paths?: string | readonly string[]\n  readonly query?: string | Object\n}\n\nexport function apiURLs({\n  baseURL, // eg: 'https://localhost:3000'\n  resource, // eg: 'todos'\n}: URLsArgs): URLs {\n  const base: string = chop(baseURL.trim())\n  const res: string = resource.trim()\n\n  verify(base.startsWith('http'))\n  verify(!res.includes('/'))\n\n  return {\n    all: () => `${base}/${res}`,\n\n    create: () => `${base}/${res}`,\n\n    one: (id: ID) => {\n      cast(idRT, id)\n      return `${base}/${res}/${id}`\n    },\n\n    edit: (id: ID) => {\n      cast(idRT, id)\n      return `${base}/${res}/${id}`\n    },\n\n    remove: (id: ID) => {\n      cast(idRT, id)\n      return `${base}/${res}/${id}`\n    },\n  }\n}\n","import axios, { AxiosPromise } from 'axios'\nimport {\n  Mixed,\n  readonlyArray,\n  ReadonlyArrayC,\n  Type,\n  TypeOf,\n} from 'technoidentity-utils'\nimport { cast, toPromise } from 'technoidentity-utils'\nimport { apiURLs, URLs } from './urls'\n\n// tslint:disable typedef\n\nexport interface Repository<\n  T extends Record<string, any>,\n  ID extends keyof T,\n  V extends number | string = T[ID]\n> {\n  all(): Promise<ReadonlyArray<T>>\n  create(value: Omit<T, ID>): Promise<T>\n  one(id: V): Promise<T>\n  edit(value: T): Promise<T>\n  remove(id: V): Promise<T>\n}\n\nexport interface APIArgs<RT extends Mixed, ID extends keyof TypeOf<RT>> {\n  readonly baseURL: string\n  readonly value: RT\n  readonly id: ID\n  readonly resource: string\n  readonly listValue?: ReadonlyArrayC<RT>\n  readonly urls?: URLs\n}\n\nexport interface APIRepository<RT extends Mixed, ID extends keyof TypeOf<RT>>\n  extends Repository<TypeOf<RT>, ID>,\n    Required<APIArgs<RT, ID>> {}\n\nconst request: <A>(\n  value: Type<A>,\n  promise: AxiosPromise<A>,\n) => Promise<A> = async (value, promise) =>\n  toPromise(value.decode((await promise).data))\n\nexport function api<RT extends Mixed, ID extends keyof TypeOf<RT>>({\n  baseURL,\n  value,\n  id,\n  resource,\n  listValue = readonlyArray(value),\n  urls = apiURLs({ baseURL, resource }),\n}: APIArgs<RT, ID>): APIRepository<RT, ID> {\n  async function all() {\n    const result: TypeOf<typeof listValue> = await request(\n      listValue,\n      axios.get<TypeOf<typeof listValue>>(urls.all()),\n    )\n    cast(listValue, result)\n\n    return result\n  }\n\n  async function one(pid: any) {\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.get<TypeOf<typeof value>>(urls.one(pid)),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  async function create(v: any) {\n    // @TODO: cast(value without id, v)\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.post<TypeOf<typeof value>>(urls.create(), v),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  async function edit(v: any) {\n    cast(value, v)\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.put<TypeOf<typeof value>>(urls.edit(v.id), v),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  async function remove(pid: any) {\n    const result: TypeOf<typeof value> = await request(\n      value,\n      axios.delete(urls.remove(pid)),\n    )\n    cast(value, result)\n\n    return result\n  }\n\n  return {\n    baseURL,\n    resource,\n    value,\n    listValue,\n    urls,\n    id,\n    all,\n    remove,\n    create,\n    edit,\n    one,\n  }\n}\n","import { format } from 'date-fns'\n\nexport function formatDate(date: Date | undefined): string | undefined {\n  return date && format(date, 'dd/MM/yyyy')\n}\n\nexport function isFunction(x: unknown): x is Function {\n  return typeof x === 'function'\n}\n","import { Simple } from 'devfractal-simple'\nimport { Get } from 'devfractal-ui-api'\nimport { Section } from 'devfractal-ui-core'\nimport { FormikActions } from 'formik'\nimport React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { date } from 'technoidentity-utils'\nimport { ObjectSchema } from 'yup'\nimport { isFunction } from './utils'\nexport interface EditorViewProps<T extends {}> {\n  readonly data: T\n  readonly id?: keyof T\n  readonly schema?: ObjectSchema<T>\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\nexport function EditorView<T extends {}>({\n  data,\n  id,\n  schema,\n  onSubmit,\n}: EditorViewProps<T>): JSX.Element {\n  return (\n    <Section>\n      <Simple.Form\n        validationSchema={schema}\n        initialValues={data}\n        onSubmit={onSubmit}\n      >\n        {Object.keys(data).map(key => (\n          <React.Fragment key={key}>\n            {key !== id &&\n              (t.boolean.is(data[key]) ? (\n                <Simple.Checkbox name={key} />\n              ) : t.number.is(data[key]) ? (\n                <Simple.Number name={key} />\n              ) : date.is(data[key]) ? (\n                <Simple.Date name={key} />\n              ) : (\n                <Simple.Text name={key} />\n              ))}\n          </React.Fragment>\n        ))}\n        <Simple.FormButtons />\n      </Simple.Form>\n    </Section>\n  )\n}\n\nexport interface EditorProps<T extends {}> {\n  readonly data: T | (() => Promise<T>)\n  readonly id: keyof T\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\nexport function Editor<T extends {}>({\n  data,\n  onSubmit,\n  id,\n}: EditorProps<T>): JSX.Element {\n  if (isFunction(data)) {\n    return (\n      <Get asyncFn={data}>\n        {data => <EditorView id={id} data={data} onSubmit={onSubmit} />}\n      </Get>\n    )\n  }\n\n  return <EditorView id={id} data={data} onSubmit={onSubmit} />\n}\n","import { Get } from 'devfractal-ui-api'\nimport {\n  CheckBox,\n  Column,\n  Columns,\n  Section,\n  Text,\n  Title,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { date } from 'technoidentity-utils'\nimport { camelCaseToPhrase } from 'technoidentity-utils'\nimport { formatDate, isFunction } from './utils'\n\nconst Header: React.FC<{ readonly objectKey: string }> = ({ objectKey }) => (\n  <Title size=\"6\">{camelCaseToPhrase(objectKey)}</Title>\n)\n\nconst Value: React.FC<{\n  readonly objectValue: string\n}> = ({ objectValue }) =>\n  t.boolean.is(objectValue) ? (\n    <CheckBox checked={objectValue} readOnly />\n  ) : date.is(objectValue) ? (\n    <Text>{formatDate(objectValue)}</Text>\n  ) : (\n    <>{objectValue}</>\n  )\n\nexport interface ViewerViewProps<T extends {}> {\n  readonly data: T\n}\n\nexport function ViewerView<T extends {}>({\n  data,\n}: ViewerViewProps<T>): JSX.Element {\n  return (\n    <Section>\n      {Object.keys(data).map(key => (\n        <Columns key={key}>\n          <Column>\n            <Header objectKey={key} />\n          </Column>\n          <Column>\n            <Value objectValue={data[key]} />\n          </Column>\n        </Columns>\n      ))}\n    </Section>\n  )\n}\n\nexport interface ViewerProps<T extends {}> {\n  readonly data: T | (() => Promise<T>)\n}\n\nexport function Viewer<T extends {}>({ data }: ViewerProps<T>): JSX.Element {\n  if (isFunction(data)) {\n    return <Get asyncFn={data}>{data => <ViewerView data={data} />}</Get>\n  }\n  return <ViewerView data={data} />\n}\n","import { RowClickEvent, SimpleTable } from 'devfractal-simple'\nimport { Button, Container, Field } from 'devfractal-ui-core'\nimport { FormikActions } from 'formik'\nimport React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { empty } from 'technoidentity-utils'\nimport { Editor } from './Editor'\nimport { Viewer } from './Viewer'\n\ninterface EditProps<T extends Record<string, any>> {\n  readonly data: T | (() => Promise<T>)\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\ninterface ViewProps<T extends Record<string, any>> {\n  readonly data: T | (() => Promise<T>)\n}\n\ninterface CreateProps<T extends Record<string, any>> {\n  onSubmit?(values: T, actions: FormikActions<T>): void\n}\n\ninterface ListProps<T extends Record<string, any>> {\n  list(): Promise<ReadonlyArray<T>>\n  onCreate?(): void\n  onEdit?(value: RowClickEvent<T>): void\n  onDelete?(value: RowClickEvent<T>): void\n}\n\nexport interface CrudViewsResult<T extends Mixed, ID extends keyof T> {\n  readonly List: React.FC<ListProps<TypeOf<T>>>\n  readonly Create: React.FC<CreateProps<Omit<TypeOf<T>, ID>>>\n  readonly Edit: React.FC<EditProps<TypeOf<T>>>\n  readonly View: React.FC<ViewProps<TypeOf<T>>>\n}\n\nexport function Views<RT extends Mixed, ID extends keyof RT>(\n  // cannot pass this to create, as getting type from typeValue is easy,\n  // not the other way round\n  typeValue: RT,\n  id: keyof RT,\n): CrudViewsResult<RT, ID> {\n  return {\n    Create: ({ onSubmit }) => (\n      <Editor id={id} data={empty(typeValue)} onSubmit={onSubmit} />\n    ),\n\n    Edit: ({ data, onSubmit }) => (\n      <Editor id={id} data={data} onSubmit={onSubmit} />\n    ),\n\n    View: ({ data }) => <Viewer data={data} />,\n\n    List: ({ list, onCreate, onEdit }) => {\n      return (\n        <Container>\n          <Field groupModifier=\"grouped-right\">\n            <Button variant=\"primary\" onClick={onCreate}>\n              New\n            </Button>\n          </Field>\n          <SimpleTable data={list} onRowClicked={onEdit} />\n        </Container>\n      )\n    },\n  }\n}\n","import { formikSubmit } from 'devfractal-forms'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { APIRepository, Repository } from './api'\nimport { links as links_, paths as paths_ } from './new'\nimport { CrudViewsResult, Views } from './Views'\ninterface ComponentsArgsBase<\n  RT extends Mixed,\n  ID extends keyof TypeOf<RT>,\n  R extends Repository<TypeOf<RT>, ID> = Repository<TypeOf<RT>, ID>\n> {\n  readonly api: R\n  readonly basePath: string\n  readonly Views?: CrudViewsResult<RT, ID>\n}\ninterface ComponentsArgs<RT extends Mixed, ID extends keyof TypeOf<RT>>\n  extends ComponentsArgsBase<RT, ID> {\n  readonly value: RT\n  readonly id: ID\n  readonly resource: string\n}\n\ninterface APIComponentsArgs<RT extends Mixed, ID extends keyof TypeOf<RT>>\n  extends ComponentsArgsBase<RT, ID, APIRepository<RT, ID>> {}\n\nexport interface ComponentsResult {\n  readonly List: React.FC<RouteComponentProps>\n  readonly Create: React.FC<RouteComponentProps>\n  readonly Edit: React.FC<RouteComponentProps<{ readonly id: string }>>\n  readonly View: React.FC<RouteComponentProps<{ readonly id: string }>>\n}\n\nexport function components<RT extends Mixed, ID extends keyof TypeOf<RT>>(\n  args: ComponentsArgs<RT, ID> | APIComponentsArgs<RT, ID>,\n): ComponentsResult {\n  // tslint:disable typedef\n  const { all, one, create, edit } = args.api\n\n  const value = 'value' in args ? args.value : args.api.value\n\n  const resource = 'value' in args ? args.resource : args.api.resource\n\n  const id = 'value' in args ? args.id : args.api.id\n\n  const CV = args.Views || Views(value, id)\n  // @TODO: only if 'name' is alphanumeric\n\n  const basePath = args.basePath\n\n  const links = links_(resource, basePath)\n  const paths = paths_(resource, basePath)\n\n  // tslint:enable typedef\n\n  return {\n    List: ({ history }) => (\n      <CV.List\n        list={all}\n        onEdit={({ value }) => history.push(links.edit(value.id))}\n        onCreate={() => history.push(paths.create)}\n      />\n    ),\n    Create: ({ history }) => (\n      <CV.Create\n        onSubmit={async (values, actions) => {\n          await formikSubmit(create)(values, actions)\n          history.push(paths.list)\n          // @TODO: handle error?\n        }}\n      />\n    ),\n\n    Edit: ({ history, match }) => (\n      <CV.Edit\n        data={async () => one(match.params.id)}\n        onSubmit={async (values, actions) => {\n          await formikSubmit(edit)(values, actions)\n          history.push(paths.list)\n          // @TODO: handle error?\n        }}\n      />\n    ),\n\n    View: ({ match }) => <CV.View data={async () => one(match.params.id)} />,\n  }\n}\n","import { Route } from 'devfractal-router'\nimport { Section } from 'devfractal-ui-core'\nimport React from 'react'\nimport { Switch } from 'react-router'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { APIRepository } from './api'\nimport { components as comps, ComponentsResult } from './Components'\nimport { paths as ps } from './new'\n\nexport interface CrudProps<RT extends Mixed, ID extends keyof TypeOf<RT>> {\n  readonly api: APIRepository<RT, ID>\n  readonly basePath: string\n  readonly paths?: ReturnType<typeof ps>\n  readonly components?: ComponentsResult\n}\n\nexport function Crud<RT extends Mixed, ID extends keyof TypeOf<RT>>({\n  basePath,\n  api,\n  paths = ps(api.resource, basePath),\n  components = comps<RT, ID>({ api, basePath }),\n}: CrudProps<RT, ID>): JSX.Element {\n  const { create, list, edit, view } = paths\n  const { Create, List, Edit, View } = components\n\n  return (\n    <Section>\n      <Switch>\n        <Route path={create} component={Create} />\n        <Route path={edit} component={Edit} />\n        <Route path={view} component={View} />\n        <Route path={list} component={List} />\n      </Switch>\n    </Section>\n  )\n}\n","import { ButtonsGroup, ButtonsGroupProps } from 'devfractal-ui-core'\nimport React from 'react'\nimport { ButtonLink, ButtonLinkProps } from './ButtonLink'\nexport interface CreateLinkProps extends ButtonLinkProps {\n  readonly alignment?: ButtonsGroupProps['alignment']\n}\n\nexport const CreateLink: React.FC<CreateLinkProps> = ({\n  alignment,\n  ...props\n}) => (\n  <ButtonsGroup alignment={alignment}>\n    <ButtonLink {...props} />\n  </ButtonsGroup>\n)\n","import { API, APIQuery } from 'devfractal-api'\nimport React from 'react'\nimport { ObjC, Props, TypeOf } from 'technoidentity-utils'\nimport { All, AllComponentProps } from './All'\nimport { paths as resPaths } from './common'\nimport { Create } from './Create'\nimport { Edit, EditComponentProps } from './Edit'\n\nexport interface CrudRoutesProps<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly api: API<Opt, Req, ID>\n  readonly form: React.FC<EditComponentProps<TypeOf<ObjC<Opt, Req>>>>\n  readonly list: React.FC<AllComponentProps<TypeOf<ObjC<Opt, Req>>>>\n  readonly paths?: ReturnType<typeof resPaths>\n  readonly redirectTo?: string\n  queryFn?(search: string): APIQuery<TypeOf<ObjC<Opt, Req>>>\n}\n\nexport function CrudRoutes<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>({\n  api,\n  list,\n  form,\n  paths = resPaths(api.resource),\n  redirectTo = paths.list,\n}: CrudRoutesProps<Opt, Req, ID>): JSX.Element {\n  const { create, edit, list: listPath } = paths\n\n  return (\n    <>\n      <Edit path={edit} api={api} form={form} redirectTo={redirectTo} />\n      <All api={api} list={list} path={listPath} />\n      <Create path={create} redirectTo={redirectTo} api={api} form={form} />\n    </>\n  )\n}\n","import { useHistory, useLocation } from 'devfractal-router'\nimport { stringify } from 'query-string'\nimport React from 'react'\nimport { IntFromString, opt } from 'technoidentity-utils'\nimport { Pager } from './Pager'\nimport { useQuery } from './useQuery'\n\nexport const RoutedPager: React.FC = () => {\n  const { pathname } = useLocation()\n  const { push } = useHistory()\n\n  // tslint:disable-next-line: typedef\n  const query = useQuery(opt({ page: IntFromString }))\n\n  const page: number = query.page ? query.page : 1\n\n  return (\n    <Pager\n      page={page}\n      onPageChange={page => {\n        push(`${pathname}?${stringify({ ...query, page })}`)\n      }}\n    />\n  )\n}\n","import { useLocation } from 'devfractal-router'\nimport { parse } from 'query-string'\nimport { cast, ObjC, Props, record, string, TypeOf } from 'technoidentity-utils'\n\nexport function useQuery<Opt extends Props, Req extends Props>(\n  spec: ObjC<Req, Opt>,\n): TypeOf<typeof spec> {\n  const { search } = useLocation()\n  const query: Record<string, string> = cast(\n    record(string, string),\n    parse(search),\n  )\n\n  return cast(spec, query)\n}\n","import React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { assert } from 'technoidentity-utils'\nimport { api } from './api'\nimport { Crud } from './Crud'\n\nexport interface SimpleCrudProps<RT extends Mixed> {\n  readonly baseURL: string\n  readonly value: RT\n  readonly id: keyof TypeOf<RT>\n  readonly resource?: string\n  readonly basePath?: string\n}\n\nexport const SimpleCrud: <T extends Mixed>(\n  args: SimpleCrudProps<T>,\n) => JSX.Element = ({ basePath = '', id, resource, ...props }) => {\n  assert(id !== undefined || 'id' in props.value, 'no id defined')\n\n  return (\n    <Crud\n      api={api({\n        id,\n        resource: resource || props.value.name,\n        ...props,\n      })}\n      basePath={basePath}\n    />\n  )\n}\n","import { SubmitAction } from 'devfractal-ui-api'\nimport React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { cast, empty } from 'technoidentity-utils'\nimport { formProps } from './common'\n\ninterface InnerFormProps<T> {\n  readonly initial: T\n  readonly edit: boolean\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface FormProps<T> {\n  readonly onSubmit: InnerFormProps<T>['onSubmit']\n  readonly initial?: InnerFormProps<T>['initial']\n}\n\n// tslint:disable typedef\n\nexport function formComponent<Spec extends Mixed>(\n  spec: Spec,\n  inner: React.FC<InnerFormProps<TypeOf<Spec>>>,\n): React.FC<FormProps<TypeOf<Spec>>> {\n  return ({ initial, ...props }) => {\n    const Component = inner\n    const verified = cast(formProps(spec), props)\n    const compProps = {\n      initial: initial || empty(spec),\n      edit: initial !== undefined,\n      ...verified,\n    }\n\n    return <Component {...compProps} />\n  }\n}\n","import React from 'react'\nimport { Mixed, TypeOf } from 'technoidentity-utils'\nimport { cast } from 'technoidentity-utils'\nimport { listProps } from './common'\n\nexport interface ListProps<T> {\n  readonly data: ReadonlyArray<T>\n  readonly page: number\n  onPageChange(page: number): void\n}\n\nexport function listComponent<Spec extends Mixed>(\n  spec: Spec,\n  Component: React.FC<ListProps<TypeOf<Spec>>>,\n): React.FC<ListProps<TypeOf<Spec>>> {\n  return props => <Component {...cast(listProps(spec), props)} />\n}\n"],"names":["ClientQuery","opt","page","IntFromString","limit","asc","string","desc","defaultQueryFn","search","cast","record","parse","range","current","Children","api","Component","list","queryFn","useLocation","pathname","push","useHistory","query","handlePageChange","stringify","Page","is","React","Get","asyncFn","many","deps","data","onPageChange","All","path","props","Route","render","ButtonLink","variant","size","state","fullWidth","rounded","inverted","outlined","children","classes","classNamesHelper","linkProps","removeIconHelpers","removeControlHelpers","removeHelpers","Link","className","base","resource","basePath","paths","view","edit","create","links","id","formProps","spec","obj","initial","onSubmit","fn","listProps","req","number","readonlyArray","Post","component","form","onPost","redirectTo","Create","undefined","getProp","idKey","Error","useMatch","type","Put","params","doGet","get","onPut","replace","Edit","Actions","onDelete","to","editTo","Icon","icon","faEdit","href","onClick","evt","preventDefault","faTrash","Pager","maxPages","Pagination","alignment","PaginationPrevious","invisible","PaginationNext","idRT","union","Int","request","value","promise","decode","toPromise","_promise","baseURL","listValue","urls","chop","trim","res","verify","startsWith","includes","all","one","remove","apiURLs","axios","result","pid","v","post","put","isFunction","x","EditorView","Section","Simple","Form","validationSchema","schema","initialValues","Object","keys","map","key","Fragment","t","Checkbox","name","Number","date","Date","Text","FormButtons","Editor","Header","Title","camelCaseToPhrase","objectKey","Value","objectValue","CheckBox","checked","readOnly","format","ViewerView","Columns","Column","Viewer","Views","typeValue","empty","View","List","onEdit","Container","Field","groupModifier","Button","onCreate","SimpleTable","onRowClicked","components","args","CV","links_","paths_","history","values","actions","formikSubmit","match","Crud","ps","comps","Switch","ButtonsGroup","resPaths","listPath","select","override","extra","striped","useQuery","assert","inner","verified","compProps"],"mappings":"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"}